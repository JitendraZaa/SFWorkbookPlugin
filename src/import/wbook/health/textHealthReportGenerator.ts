import * as fs from 'node:fs';
import { HealthCheckResult } from './healthProcessor.js';

export class TextHealthReportGenerator {
  private orgAlias: string;
  private healthResults: HealthCheckResult[];

  public constructor(orgAlias: string, healthResults: HealthCheckResult[]) {
    this.orgAlias = orgAlias;
    this.healthResults = healthResults;
  }

  public generateReport(fileName: string): void {
    let reportContent = '';

    // Title
    reportContent += '='.repeat(60) + '\n';
    reportContent += '           SALESFORCE ORG HEALTH CHECK REPORT\n';
    reportContent += '='.repeat(60) + '\n';
    reportContent += `Generated on: ${new Date().toLocaleDateString()}\n`;
    reportContent += `Org Alias: ${this.orgAlias}\n\n`;

    // Executive Summary
    reportContent += 'EXECUTIVE SUMMARY\n';
    reportContent += '-'.repeat(20) + '\n';
    const categories = [...new Set(this.healthResults.map(r => r.category))];
    reportContent += `Total Technical Debt Categories Found: ${categories.length}\n`;

    const highSeverityCount = this.healthResults.filter(r => r.severity === 'High').length;
    const mediumSeverityCount = this.healthResults.filter(r => r.severity === 'Medium').length;
    const lowSeverityCount = this.healthResults.filter(r => r.severity === 'Low').length;

    reportContent += `High Severity Issues: ${highSeverityCount}\n`;
    reportContent += `Medium Severity Issues: ${mediumSeverityCount}\n`;
    reportContent += `Low Severity Issues: ${lowSeverityCount}\n\n`;

    // Technical Debt Details by Category
    reportContent += 'TECHNICAL DEBT ANALYSIS BY CATEGORY\n';
    reportContent += '-'.repeat(40) + '\n\n';

    categories.forEach(category => {
      const categoryResults = this.healthResults.filter(r => r.category === category);

      reportContent += `${category.toUpperCase()}\n`;
      reportContent += '='.repeat(category.length) + '\n\n';

      categoryResults.forEach(result => {
        reportContent += `${result.title}\n`;
        reportContent += `Severity: ${result.severity} | Count: ${result.count}\n\n`;

        reportContent += `Description: ${result.description}\n\n`;
        reportContent += `Recommendation: ${result.recommendation}\n\n`;

        if (result.items.length > 0 && result.count > 0) {
          reportContent += 'Items Found:\n';
          result.items.forEach(item => {
            reportContent += `â€¢ ${item}\n`;
          });
          reportContent += '\n';
        }

        reportContent += '-'.repeat(50) + '\n\n';
      });
    });

    // Priority Recommendations
    reportContent += 'PRIORITY RECOMMENDATIONS\n';
    reportContent += '-'.repeat(25) + '\n\n';

    const highPriorityItems = this.healthResults.filter(r => r.severity === 'High');
    if (highPriorityItems.length > 0) {
      reportContent += 'HIGH PRIORITY (Address Immediately):\n\n';
      highPriorityItems.forEach((item, index) => {
        reportContent += `${index + 1}. ${item.title}\n`;
        reportContent += `   ${item.recommendation}\n\n`;
      });
    }

    const mediumPriorityItems = this.healthResults.filter(r => r.severity === 'Medium');
    if (mediumPriorityItems.length > 0) {
      reportContent += 'MEDIUM PRIORITY (Address Soon):\n\n';
      mediumPriorityItems.forEach((item, index) => {
        reportContent += `${index + 1}. ${item.title}\n`;
        reportContent += `   ${item.recommendation}\n\n`;
      });
    }

    // Footer
    reportContent += '='.repeat(60) + '\n';
    reportContent += 'Generated by Salesforce Health Check Tool\n';
    reportContent += '='.repeat(60) + '\n';

    fs.writeFileSync(fileName, reportContent);
  }
} 